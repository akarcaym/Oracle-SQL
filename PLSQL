--basics

DECLARE
    v_mesaj VARCHAR2(20) := 'hello';
BEGIN
   DBMS_OUTPUT.put_line (v_mesaj);
END;

select * from hr.employees
DECLARE 
rand_id hr.employees.employee_id%type :=100;
e_name hr.employees.first_name%type;
e_dept hr.employees.department_id%type;
BEGIN
SELECT first_name, department_id INTO e_name, e_dept 
FROM hr.employees 
WHERE employee_id = rand_id; 
dbms_output.put_line('Employee name: '|| e_name ||  ' Department: ' || e_dept ||'' );
END;

select * from hr.departments

SELECT e.first_name, d.department_name
FROM hr.employees e, hr.departments d
WHERE e.employee_id = 110 AND e.department_id = d.department_id


DECLARE 
rand_id hr.employees.employee_id%type :=110;
e_name hr.employees.first_name%type;
e_dept hr.departments.department_name%type;
BEGIN
SELECT e.first_name, d.department_name INTO e_name, e_dept 
FROM hr.employees e, hr.departments d
WHERE e.employee_id = rand_id AND e.department_id = d.department_id; 
dbms_output.put_line('Employee name: '|| e_name ||  ' Department: ' || e_dept ||'' );
END;



DECLARE
t_date DATE := SYSDATE;
v_hour TIMESTAMP := SYSTIMESTAMP;
BEGIN
dbms_output.put_line(t_date);
dbms_output.put_line(v_hour);
END;


--IF-THEN-ELSE : check the salary of employee

DECLARE 
rand_id hr.employees.employee_id%type :=110;
e_name hr.employees.first_name%type;
e_sal hr.employees.salary%type;
BEGIN
SELECT first_name, salary INTO e_name, e_sal 
FROM hr.employees
WHERE employee_id = rand_id;
    IF (e_sal < 9000) THEN
    dbms_output.put_line('Employee name: '|| e_name || ' give promotion'  );
    ELSE
    dbms_output.put_line('Employee name: '|| e_name ||  ' no promotion' );
    END IF;
END;

-- create your own table

CREATE TABLE c_employees
AS (SELECT * FROM hr.employees)

--check the new table

SELECT * FROM c_employees

-- Similar to below example. But make some updates after if statement

DECLARE 
    rand_id c_employees.employee_id%type :=110;
    e_name c_employees.first_name%type;
    e_sal c_employees.salary%type;
BEGIN
    SELECT first_name, salary INTO e_name, e_sal 
    FROM c_employees
    WHERE employee_id = rand_id;
        IF (e_sal < 9000) THEN
        UPDATE c_employees
        SET salary = salary + 1000
            WHERE employee_id = rand_id;
        dbms_output.put_line('Salary updated' );
        END IF;
END;

--check the results 

SELECT e.salary AS "old salary", c.salary "updated salary" FROM hr.employees e, c_employees c WHERE e.employee_id = c.employee_id AND c.employee_id = 110

--LOOP

DECLARE 
   a number := 1; 
BEGIN 
   LOOP 
      dbms_output.put_line(a); 
      a := a + 1; 
      IF a > 5 THEN 
         exit; 
      END IF; 
   END LOOP;   
   dbms_output.put_line('Last value of a is : ' || a); 
END;

--WHILE


DECLARE 
    a number := 1;
BEGIN
    WHILE a < 10 LOOP
    a := a + 1;
    dbms_output.put_line(a); 
    END LOOP;
END;


--FOR

DECLARE 
    a number(2);
BEGIN
    FOR a IN REVERSE 20 .. 30 LOOP
    dbms_output.put_line(a); 
    END LOOP;
END;

--STRING

DECLARE
a varchar2(10) := 'hello ';
b varchar2(10) := 'dude';
c varchar2(20);
d number;
BEGIN
c := INITCAP(CONCAT(a,b));
dbms_output.put_line(c);
d := INSTR(a,'e'); --first occurance of e 
dbms_output.put_line(d);
dbms_output.put_line(length(c));
dbms_output.put_line(lower(c));
dbms_output.put_line(lpad(c,'14','0'));
dbms_output.put_line(lpad(c,'3','z'));
dbms_output.put_line(rpad(c,'14','z'));
dbms_output.put_line(ltrim(c,'Hel'));
dbms_output.put_line(replace(c,'ello','ola'));
dbms_output.put_line(substr(c,'2','2'));
dbms_output.put_line(upper(c));
END;

--ARRAY

DECLARE
type seasons IS VARARRAY(4) OF VARCHAR(10);
season_list seasons;
cap number;
BEGIN
season_list := seasons('winter','spring','summer','autumn')
cap = season_list.count
FOR i IN 1 .. cap LOOP
    dbms_output.put_line(season_list[i]);
END LOOP;
END;
    
-- ARRAY W/CURSOR. extende department names into array

DECLARE
    CURSOR depts IS SELECT department_name FROM hr.departments;
    type dept_list is VARRAY(30) OF hr.departments.department_name%type;
    departments dept_list := dept_list();
    counter integer:= 0;
BEGIN
    FOR i in depts LOOP
        counter := counter + 1;
        departments.extend;
        departments(counter) := i.department_name;
        dbms_output.put_line(departments(counter)); 
    END LOOP;
END;
    
--PROCEDURE

CREATE OR REPLACE PROCEDURE example_pro
AS 
BEGIN 
   dbms_output.put_line('Hello Dude'); 
END; 

--

EXEC example_pro;

--

BEGIN 
   example_pro;
END; 

--delete procedure

DROP PROCEDURE example_pro;

-- finding minimum value
CREATE OR REPLACE PROCEDURE findMin(a IN number, b IN number, c OUT number) IS
BEGIN
    IF a>b THEN
    c := b;
    ELSE 
    c := a;
    END IF;
END;


DECLARE
x number := 2673;
y number := 2671;
z number;
BEGIN
findMin(x,y,z);
dbms_output.put_line('Min value is: ' || z); 
END;

--create a procedure for calculating promoted salary

CREATE OR REPLACE PROCEDURE newSalary(x IN OUT number) AS
BEGIN
x:= (x/10) + x ;
END;

DECLARE
    rand_id c_employees.employee_id%type := 111;
    e_name c_employees.first_name%type;
    e_sal c_employees.salary%type;
BEGIN
    SELECT first_name, salary INTO e_name, e_sal
    FROM c_employees
    WHERE employee_id = rand_id;
    dbms_output.put_line('Old salary is: ' || e_sal); 
    newSalary(e_sal);
    dbms_output.put_line('New salary is: ' || e_sal); 
END;

select * from c_employees where employee_id=111

--At this case salary is not updated. Let's update the column


DECLARE
    rand_id c_employees.employee_id%type := 111;
    e_name c_employees.first_name%type;
    e_sal c_employees.salary%type;
BEGIN
    SELECT first_name, salary INTO e_name, e_sal
    FROM c_employees
    WHERE employee_id = rand_id;
    dbms_output.put_line('Old salary is: ' || e_sal); 
    newSalary(e_sal);
    dbms_output.put_line('New salary is: ' || e_sal); 
    UPDATE c_employees
    SET salary = e_sal
    WHERE employee_id = rand_id;
    dbms_output.put_line('Salary is updated'); 
END;


select * from c_employees where employee_id=111

--

CREATE OR REPLACE FUNCTION totalDept RETURN number IS
    total number(2) := 0;
BEGIN
    SELECT count(*) INTO total
    FROM hr.departments;
    RETURN total;
END;

DECLARE 
   d number(2); 
BEGIN 
   d := totalDept(); 
   dbms_output.put_line('Depts : ' || d); 
END; 

--Find the employees

CREATE OR REPLACE FUNCTION totalEmp (x hr.employees.department_id%TYPE) RETURN number IS
    total number(2) := 0;
BEGIN
    SELECT count(*) INTO total
    FROM hr.employees WHERE department_id = x;
    RETURN total;
END;


DECLARE 
   d number(2); 
BEGIN 
   d := totalEmp(100); 
   dbms_output.put_line('Employee number : ' || d); 
END; 

--check the value

SELECT count(*) FROM hr.employees WHERE department_id = 100

--try to find employee number of each department

DECLARE 
CURSOR depts IS SELECT department_id FROM hr.departments;
counter number := 0;
d number(2);
dept_no number(3);
dept_name varchar2(20);
BEGIN
    FOR i IN depts LOOP
    SELECT department_name INTO dept_name FROM hr.departments WHERE department_id = i.department_id;
    d := totalEmp(i.department_id);
    IF d != 0 then
        dbms_output.put_line('Employee number of ' || dept_name || 'is : ' || d); 
    END IF;
    END LOOP;
END;

-- open & fetch in cursor

DECLARE
    dept_name hr.departments.department_name%type;
    dept_id hr.departments.department_id%type;
    CURSOR crs IS SELECT department_name, department_id FROM hr.departments;
BEGIN
    OPEN crs;
    LOOP
    FETCH crs INTO dept_name, dept_id;
    EXIT WHEN crs%NOTFOUND;
    dbms_output.put_line('Department ID is: ' || dept_id|| '   Department name is: ' || dept_name); 
    END LOOP;
END;

